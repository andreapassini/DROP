#version 410

layout (local_size_x = 1) in;

uniform float Gravity1 = 1000.0;
uniform vec3 BalckHolePos1 = vec3(5, 0, 0);

uniform float Gravity2 = 1000.0;
uniform vec3 BalckHolePos2 = vec3(-5, 0, 0);

const float ParticleMass = 0.1;
const float ParticleInvMass = 1.0 / ParticleMass;

uniform float MaxDist = 45.0;

const float DeltaT = 0.0005;

layout(std410, binding=0) buffer Pos {
	vec4 Position[];
}

layout(std410, binding=0) buffer Vel {
	vec4 Velocity[];
}

void main(){
	uint idx = gl_GlobalInvocationID.x;

	vec3 p = Postion[idx].xyz;

	// Force around the first hole
	vec3 d = BalckHolePos1 - p;
	float dist = length(d);
	vec3 force = (Gravity1 / dist) * normalize(d);
	
	// Force around the first hole
	d = BalckHolePos2 - p;
	dist = length(d);
	force = (Gravity2 / dist) * normalize(d);

	// Reset particles that get too far from the attractors
	if(dist > MaxDist){
		Position[idx] = vec4(0, 0, 0, 1);
	} else {
		// Euler integration
		vec3 a = force * ParticleInvMass;
		Position[idx] = vec4(p + Velocity[idx].xyz * DeltaT + 0.5 * a * DeltaT * DeltaT, 1.0);
		Velocity[idx] = vec4( Velocity[idx].xyz + a * DeltaT, 0.0);
	}

	Position[idx].xyz = p;
}